#include <iostream>
#include <cmath>
#include <vector>
#include <stack>
#include <studio>
using namespace std;

bool isOperator(char ch) {
vector<char> op ={'+','-','*','/','%'};
return find(op.begin(), op.end(), ch) != op.end();
}

int precedence(string op){
if(op == "+"|| op == "-") return 1;
if(op == "*"|| op == "/"|| op == "%") return 2;
return 0;
}

double Operasi(double a, double b, string op){
double total = 0;
if(op == "+"){
total = b+a;
}else if(op == "-"){
total = b-a;
}else if(op == "*"){
total = b*a;
}else if(op == "/"){
total = b/a;
}else if(op == "%"){
total = (int)b % (int)a;
}
return total;
}

vector<string> stringToInfix(string str){
  vector<string> infix;
  string angka;

  for(size_t i = 0; i < str.size(); i++){
    char ch = str[i];

    if(isspace(ch)){
      continue;
    }
    else if(isdigit(ch)){
      angka += ch;
    }
    else if(ch == '-' && (i == 0 || isOperator(str[i-1]) || str[i-1] == '(')){
        if((str[i-1] == '(' && str[i+2] == ')')){
          angka += ch;
    }
    else if(isOperator(str[i-1]) || str[i+1] == ')' || str[i+1] == '(' || str[i-1] == '('){
      infix.push_back("-1");
      infix.push_back("*");
    }
    else if(isdigit(str[i+1] && str[i-1] == '(') || i == 0)){ 
      angka += ch;
    }
    else{
      infix.push_back("-");
      }
    }
    else{
      if(!angka.empty()){
        infix.push_back(angka);
        angka.clear();
    }
    infix.push_back(string(1, ch));
  }
}

if(!angka.empty()){
  infix.push_back(angka);
}
return infix;
}
